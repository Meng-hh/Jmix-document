import org.yaml.snakeyaml.Yaml
import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://nexus.jmix.io/repository/public"
        }
        gradlePluginPortal()
    }
    dependencies {
        classpath("io.jmix.gradle:jmix-gradle-plugin:1.2.0-RC1")
        classpath("org.ajoberstar.grgit:grgit-core:4.1.0")
        classpath("org.yaml:snakeyaml:1.27")
    }
}

subprojects {

    buildDir = "$rootProject.buildDir/$name"

    apply plugin: 'java'
    apply plugin: 'io.jmix'
    apply plugin: 'org.springframework.boot'

    jmix {
        bomVersion = '1.2.0-RC1'
        projectId = 'sample'
    }

    group = 'com.company'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '1.8'

    repositories {
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
        mavenLocal()
        mavenCentral()
        maven {
            url('https://nexus.jmix.io/repository/public')
        }
        if (rootProject.hasProperty('premiumRepoUser')) {
            maven {
                url('https://nexus.jmix.io/repository/premium')
                credentials {
                    username("${rootProject['premiumRepoUser']}")
                    password("${rootProject['premiumRepoPass']}")
                }
            }
        }
    }

    test {
        useJUnitPlatform()
    }
}

task frontApi {
    doLast {
        final tempDir = '_temp'
        def repoUrl = 'https://github.com/haulmont/jmix-frontend.git';

        //noinspection GroovyAccessibility,GroovyAssignabilityCheck
        def grgit = Grgit.clone(dir: tempDir, uri: repoUrl)

        getBranchNames(repoUrl).each {
            grgit.checkout(branch: "origin/${it}")
            def version = getFrontendUiVersion(tempDir)
            File src = new File("${tempDir}/docs-src/api-reference")
            File dest = new File("build/site/jmix-frontend-docs/${version}/api-reference/")
            copy {
                from src
                into dest
            }
        }

        delete tempDir
        grgit.close()
    }
}

static List<String> getBranchNames(repoUrl) {
    def playbook = new Yaml().load(
            new File('antora-playbook.yml').newInputStream()
    )
    def frontendRepo = playbook.content.sources.find { it.url == repoUrl }
    def branches = frontendRepo.branches
    return (branches instanceof List) ? branches : [branches]
}

static String getFrontendUiVersion(tempDir) {
    def antoraYml = new Yaml().load(
            new File("${tempDir}/docs-src/doc-component-repo/antora.yml").newInputStream()
    )
    return antoraYml.version
}
